#!/bin/bash

# Variables
META_GRAMMAR="Meta_Grammar"
META_RULE="processor"
GEN_GRAMMAR="Grammar"

# Base msg colors
RED="\033[1;31m"
YELLOW="\033[0;33m"
GREEN="\033[0;32m"
NC="\033[0m" # No Color


# Help message.
_help() {
    printf "${GREEN}$(basename $0)${NC}\n"
    printf "Linguistic rules for beginners.\n"

    echo

    printf "${YELLOW}USAGE:${NC}\n"
    printf "    | $(basename $0) [-h | help]\n"
    printf "    | $(basename $0) [-c | compile]\n"
    printf "    | $(basename $0) [-r | run] <RULES> <INPUT>\n"

    echo

    printf "${YELLOW}OPTIONS:${NC}\n"
    printf "    ${GREEN}-h${NC}, ${GREEN}help${NC}          Help message.\n"
    printf "    ${GREEN}-c${NC}, ${GREEN}compile${NC}       Generates and compiles the Meta-Grammar sources.\n"
    printf "    ${GREEN}-r${NC}, ${GREEN}run${NC}           Generates the specific grammar and gives sentence as input.\n"

    echo

    printf "${YELLOW}ARGS:${NC}\n"
    printf "    ${GREEN}<RULES>${NC}           Sentence rules (STRUCTURE + ERRORS blocks).\n"
    printf "    ${GREEN}<INPUT>${NC}           Parsed input (INPUT block).\n"
}

# Compiles the Meta-Grammar.
compile() {
    printf "${YELLOW}> compiling and running Meta-Grammar...${NC}\n"
    echo
    
    # generate meta-grammar sources
    MKDIR_SRC="mkdir -p target/generated-sources-meta"
    GEN_SRC="java -jar ./lib/antlr-4.8-complete.jar -Xexact-output-dir -o target/generated-sources-meta ./src/antlr4/${META_GRAMMAR}.g4"
    echo $MKDIR_SRC && $($MKDIR_SRC)
    echo $GEN_SRC && $($GEN_SRC)

    # compile meta-grammar sources
	MKDIR_CLASS="mkdir -p target/classes-meta"
	GEN_CLASS="javac src/java/*.java target/generated-sources-meta/*.java -d target/classes-meta"
    echo $MKDIR_CLASS && $($MKDIR_CLASS)
    echo $GEN_CLASS && $($GEN_CLASS)
}

# Runs the tool.
run() {
    # checks if arguments are empty
    if [ "$1" = "" ] || [ "$2" = "" ]; then
        exit -1
    fi
    
    # checks if files passed as arguments exist
    if [ ! -f "$1" ] || [ ! -f "$2" ]; then
        printf "${RED}ERROR:${NC} Files given as argument are not valid!\n"
        exit -1
    fi

    # checks if meta-grammar sources were compiled
    if [ ! -d "target/classes-meta" ]; then
        printf "${RED}ERROR:${NC} Meta-Grammar needs to be compiled first!\n"
        exit -1
    fi

    #########################################################################

    printf "${YELLOW}> generating the grammar...${NC}\n"
    
    # join the two files together
    cat $1 $2 > input/meta-lang
    # change working directory && process meta-lang file
    (cd target/classes-meta && java org.antlr.v4.gui.TestRig ${META_GRAMMAR} ${META_RULE} ../../input/meta-lang)
    mv target/classes-meta/phrase.tmp input
    mv target/classes-meta/${GEN_GRAMMAR}.g4 src/antlr4
    

    printf "${YELLOW}> compiling the grammar...${NC}\n"
    
    java -jar ./lib/antlr-4.8-complete.jar -Xexact-output-dir -o target/generated-sources-grammar ./src/antlr4/${GEN_GRAMMAR}.g4
	mkdir -p target/classes-grammar
	javac target/generated-sources-grammar/*.java -d target/classes-grammar

    
    printf "${YELLOW}> running the grammar...${NC}\n"

    (cd target/classes-grammar && java org.antlr.v4.gui.TestRig ${GEN_GRAMMAR} main ../../input/phrase.tmp -gui)

    # clean
    rm input/phrase.tmp
}


# Main #
while [ "$1" != "" ]; do
    case "$1" in
        -c | compile)
            compile
            exit
            ;;

        -r | run)
            run $2 $3
            exit
            ;;

        -h | help)
            _help
            exit
            ;;
        *)
            printf "${RED}ERROR:${NC} Option '$1' is not available...\n"
            echo
            printf "USAGE:\n"
            printf "    | $(basename $0) [-h | help]\n"
            printf "    | $(basename $0) [-c | compile]\n"
            printf "    | $(basename $0) [-r | run] <RULES> <INPUT>\n"
            echo
            printf "For more information try ${GREEN}-h${NC} or ${GREEN}help${NC}\n"
            exit
            ;;
    esac
done
